/**
 * csv-sort
 * Sorts double-entry bookkeeping CSV coming from internet banking
 * Version: 3.0.51
 * Author: Roy Revelt, Codsen Ltd
 * License: MIT
 * Homepage: https://gitlab.com/codsen/codsen/tree/master/packages/csv-sort
 */

!function(e,r){"object"==typeof exports&&"undefined"!=typeof module?module.exports=r():"function"==typeof define&&define.amd?define(r):(e=e||self).csvSort=r()}(this,(function(){"use strict";function e(r){return(e="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(r)}function r(e,r){if(!Array.isArray(e))throw new TypeError(`ranges-sort: [THROW_ID_01] Input must be an array, consisting of range arrays! Currently its type is: ${typeof e}, equal to: ${JSON.stringify(e,null,4)}`);if(0===e.length)return e;const t=Object.assign({},{strictlyTwoElementsInRangeArrays:!1,progressFn:null},r);let n,i;if(t.strictlyTwoElementsInRangeArrays&&!e.every((e,r)=>2===e.length||(n=r,i=e.length,!1)))throw new TypeError(`ranges-sort: [THROW_ID_03] The first argument should be an array and must consist of arrays which are natural number indexes representing TWO string index ranges. However, ${n}th range (${JSON.stringify(e[n],null,4)}) has not two but ${i} elements!`);if(!e.every((e,r)=>!(!Number.isInteger(e[0])||e[0]<0||!Number.isInteger(e[1])||e[1]<0)||(n=r,!1)))throw new TypeError(`ranges-sort: [THROW_ID_04] The first argument should be an array and must consist of arrays which are natural number indexes representing string index ranges. However, ${n}th range (${JSON.stringify(e[n],null,4)}) does not consist of only natural numbers!`);const s=e.length*e.length;let o=0;return Array.from(e).sort((e,r)=>(t.progressFn&&(o++,t.progressFn(Math.floor(100*o/s))),e[0]===r[0]?e[1]<r[1]?-1:e[1]>r[1]?1:0:e[0]<r[0]?-1:1))}function t(e,t){function n(e){return"string"==typeof e}function i(e){return e&&"object"==typeof e&&!Array.isArray(e)}if(!Array.isArray(e))return e;const s={mergeType:1,progressFn:null,joinRangesThatTouchEdges:!0};let o;if(t){if(!i(t))throw new Error(`emlint: [THROW_ID_03] the second input argument must be a plain object. It was given as:\n${JSON.stringify(t,null,4)} (type ${typeof t})`);if(o=Object.assign({},s,t),o.progressFn&&i(o.progressFn)&&!Object.keys(o.progressFn).length)o.progressFn=null;else if(o.progressFn&&"function"!=typeof o.progressFn)throw new Error(`ranges-merge: [THROW_ID_01] opts.progressFn must be a function! It was given of a type: "${typeof o.progressFn}", equal to ${JSON.stringify(o.progressFn,null,4)}`);if(o.mergeType&&1!==o.mergeType&&2!==o.mergeType)if(n(o.mergeType)&&"1"===o.mergeType.trim())o.mergeType=1;else{if(!n(o.mergeType)||"2"!==o.mergeType.trim())throw new Error(`ranges-merge: [THROW_ID_02] opts.mergeType was customised to a wrong thing! It was given of a type: "${typeof o.mergeType}", equal to ${JSON.stringify(o.mergeType,null,4)}`);o.mergeType=2}if("boolean"!=typeof o.joinRangesThatTouchEdges)throw new Error(`ranges-merge: [THROW_ID_04] opts.joinRangesThatTouchEdges was customised to a wrong thing! It was given of a type: "${typeof o.joinRangesThatTouchEdges}", equal to ${JSON.stringify(o.joinRangesThatTouchEdges,null,4)}`)}else o=Object.assign({},s);const a=e.map(e=>[...e]).filter(e=>void 0!==e[2]||e[0]!==e[1]);let u,l,f;u=o.progressFn?r(a,{progressFn:e=>{f=Math.floor(e/5),f!==l&&(l=f,o.progressFn(f))}}):r(a);const c=u.length-1;for(let e=c;e>0;e--)o.progressFn&&(f=Math.floor(78*(1-e/c))+21,f!==l&&f>l&&(l=f,o.progressFn(f))),(u[e][0]<=u[e-1][0]||!o.joinRangesThatTouchEdges&&u[e][0]<u[e-1][1]||o.joinRangesThatTouchEdges&&u[e][0]<=u[e-1][1])&&(u[e-1][0]=Math.min(u[e][0],u[e-1][0]),u[e-1][1]=Math.max(u[e][1],u[e-1][1]),void 0!==u[e][2]&&(u[e-1][0]>=u[e][0]||u[e-1][1]<=u[e][1])&&null!==u[e-1][2]&&(null===u[e][2]&&null!==u[e-1][2]?u[e-1][2]=null:void 0!==u[e-1][2]?2===o.mergeType&&u[e-1][0]===u[e][0]?u[e-1][2]=u[e][2]:u[e-1][2]+=u[e][2]:u[e-1][2]=u[e][2]),u.splice(e,1),e=u.length);return u}function n(e){return null!=e}function i(e){return"string"==typeof e}function s(e,r=!0,t){if(!(t.trim().length||e.length&&"\n"!==t&&" "!==t&&" "===(r?e[e.length-1]:e[0])||e.length&&"\n"===(r?e[e.length-1]:e[0])&&"\n"!==t&&" "!==t))if(r){if(("\n"===t||" "===t)&&e.length&&" "===e[e.length-1])for(;e.length&&" "===e[e.length-1];)e.pop();e.push(" "===t||"\n"===t?t:" ")}else{if(("\n"===t||" "===t)&&e.length&&" "===e[0])for(;e.length&&" "===e[0];)e.shift();e.unshift(" "===t||"\n"===t?t:" ")}}function o(e,r){if("string"==typeof e&&e.length){let t,n,i=!1;if(e.includes("\r\n")&&(i=!0),t=r&&"number"==typeof r?r:1,""===e.trim()){const r=[];for(n=t,Array.from(e).forEach(e=>{("\n"!==e||n)&&("\n"===e&&n--,s(r,!0,e))});r.length>1&&" "===r[r.length-1];)r.pop();return r.join("")}const o=[];if(n=t,""===e[0].trim())for(let r=0,t=e.length;r<t&&0===e[r].trim().length;r++)("\n"!==e[r]||n)&&("\n"===e[r]&&n--,s(o,!0,e[r]));const a=[];if(n=t,""===e.slice(-1).trim())for(let r=e.length;r--&&0===e[r].trim().length;)("\n"!==e[r]||n)&&("\n"===e[r]&&n--,s(a,!1,e[r]));return i?`${o.join("")}${e.trim()}${a.join("")}`.replace(/\n/g,"\r\n"):o.join("")+e.trim()+a.join("")}return e}function a(e){return null!=e}function u(e){return Number.isInteger(e)&&e>=0}function l(e){return"string"==typeof e}function f(e){return/^\d*$/.test(e)?parseInt(e,10):e}class c{constructor(e){const r=Object.assign({},{limitToBeAddedWhitespace:!1,limitLinebreaksCount:1,mergeType:1},e);if(r.mergeType&&1!==r.mergeType&&2!==r.mergeType)if(l(r.mergeType)&&"1"===r.mergeType.trim())r.mergeType=1;else{if(!l(r.mergeType)||"2"!==r.mergeType.trim())throw new Error(`ranges-push: [THROW_ID_02] opts.mergeType was customised to a wrong thing! It was given of a type: "${typeof r.mergeType}", equal to ${JSON.stringify(r.mergeType,null,4)}`);r.mergeType=2}this.opts=r}add(e,r,t,...n){if(n.length>0)throw new TypeError(`ranges-push/Ranges/add(): [THROW_ID_03] Please don't overload the add() method. From the 4th input argument onwards we see these redundant arguments: ${JSON.stringify(n,null,4)}`);if(!a(e)&&!a(r))return;if(a(e)&&!a(r)){if(Array.isArray(e)){if(e.length){if(e.some(e=>Array.isArray(e)))return void e.forEach(e=>{Array.isArray(e)&&this.add(...e)});e.length>1&&u(f(e[0]))&&u(f(e[1]))&&this.add(...e)}return}throw new TypeError(`ranges-push/Ranges/add(): [THROW_ID_12] the first input argument, "from" is set (${JSON.stringify(e,null,0)}) but second-one, "to" is not (${JSON.stringify(r,null,0)})`)}if(!a(e)&&a(r))throw new TypeError(`ranges-push/Ranges/add(): [THROW_ID_13] the second input argument, "to" is set (${JSON.stringify(r,null,0)}) but first-one, "from" is not (${JSON.stringify(e,null,0)})`);const i=/^\d*$/.test(e)?parseInt(e,10):e,s=/^\d*$/.test(r)?parseInt(r,10):r;if(u(t)&&(t=String(t)),!u(i)||!u(s))throw u(i)&&i>=0?new TypeError(`ranges-push/Ranges/add(): [THROW_ID_10] "to" value, the second input argument, must be a natural number or zero! Currently it's of a type "${typeof s}" equal to: ${JSON.stringify(s,null,4)}`):new TypeError(`ranges-push/Ranges/add(): [THROW_ID_09] "from" value, the first input argument, must be a natural number or zero! Currently it's of a type "${typeof i}" equal to: ${JSON.stringify(i,null,4)}`);if(a(t)&&!l(t)&&!u(t))throw new TypeError(`ranges-push/Ranges/add(): [THROW_ID_08] The third argument, the value to add, was given not as string but ${typeof t}, equal to:\n${JSON.stringify(t,null,4)}`);if(a(this.slices)&&Array.isArray(this.last())&&i===this.last()[1]){if(this.last()[1]=s,this.last()[2],null!==this.last()[2]&&a(t)){let e=!(a(this.last()[2])&&this.last()[2].length>0)||this.opts&&this.opts.mergeType&&1!==this.opts.mergeType?t:this.last()[2]+t;this.opts.limitToBeAddedWhitespace&&(e=o(e,this.opts.limitLinebreaksCount)),l(e)&&!e.length||(this.last()[2]=e)}}else{this.slices||(this.slices=[]);const e=void 0===t||l(t)&&!t.length?[i,s]:[i,s,this.opts.limitToBeAddedWhitespace?o(t,this.opts.limitLinebreaksCount):t];this.slices.push(e)}}push(e,r,t,...n){this.add(e,r,t,...n)}current(){return null!=this.slices?(this.slices=t(this.slices,{mergeType:this.opts.mergeType}),this.opts.limitToBeAddedWhitespace?this.slices.map(e=>a(e[2])?[e[0],e[1],o(e[2],this.opts.limitLinebreaksCount)]:e):this.slices):null}wipe(){this.slices=void 0}replace(e){if(Array.isArray(e)&&e.length){if(!Array.isArray(e[0])||!u(e[0][0]))throw new Error(`ranges-push/Ranges/replace(): [THROW_ID_11] Single range was given but we expected array of arrays! The first element, ${JSON.stringify(e[0],null,4)} should be an array and its first element should be an integer, a string index.`);this.slices=Array.from(e)}else this.slices=void 0}last(){return void 0!==this.slices&&Array.isArray(this.slices)?this.slices[this.slices.length-1]:null}}var p,h,g=Function.prototype,y=Object.prototype,m=g.toString,d=y.hasOwnProperty,b=m.call(Object),v=y.toString,T=(p=Object.getPrototypeOf,h=Object,function(e){return p(h(e))});var w=function(e){if(!function(e){return!!e&&"object"==typeof e}(e)||"[object Object]"!=v.call(e)||function(e){var r=!1;if(null!=e&&"function"!=typeof e.toString)try{r=!!(e+"")}catch(e){}return r}(e))return!1;var r=T(e);if(null===r)return!0;var t=d.call(r,"constructor")&&r.constructor;return"function"==typeof t&&t instanceof t&&m.call(t)==b},S="undefined"!=typeof globalThis?globalThis:"undefined"!=typeof window?window:"undefined"!=typeof global?global:"undefined"!=typeof self?self:{};var O=function(e,r){return e(r={exports:{}},r.exports),r.exports}((function(e,r){!function(t){function n(e,r){return r instanceof Object||(r={trim:!0}),"number"==typeof e&&!isNaN(e)||(e=(e||"").toString(),"trim"in r&&!r.trim?!/\s/.test(e):!!(e=e.trim())&&!isNaN(e))}e.exports&&(r=e.exports=n),r.isNumeric=n}()})),$=(O.isNumeric,/^\s+|\s+$/g),N="[\\ud800-\\udfff]",_="[\\u0300-\\u036f\\ufe20-\\ufe23\\u20d0-\\u20f0]",R="\\ud83c[\\udffb-\\udfff]",I="[^\\ud800-\\udfff]",E="(?:\\ud83c[\\udde6-\\uddff]){2}",A="[\\ud800-\\udbff][\\udc00-\\udfff]",D="(?:"+_+"|"+R+")"+"?",F="[\\ufe0e\\ufe0f]?"+D+("(?:\\u200d(?:"+[I,E,A].join("|")+")[\\ufe0e\\ufe0f]?"+D+")*"),j="(?:"+[I+_+"?",_,E,A,N].join("|")+")",W=RegExp(R+"(?="+R+")|"+j+F,"g"),H=RegExp("[\\u200d\\ud800-\\udfff\\u0300-\\u036f\\ufe20-\\ufe23\\u20d0-\\u20f0\\ufe0e\\ufe0f]"),J="object"==typeof S&&S&&S.Object===Object&&S,k="object"==typeof self&&self&&self.Object===Object&&self,x=J||k||Function("return this")();function C(e,r,t){if(r!=r)return function(e,r,t,n){for(var i=e.length,s=t+(n?1:-1);n?s--:++s<i;)if(r(e[s],s,e))return s;return-1}(e,M,t);for(var n=t-1,i=e.length;++n<i;)if(e[n]===r)return n;return-1}function M(e){return e!=e}function K(e){return function(e){return H.test(e)}(e)?function(e){return e.match(W)||[]}(e):function(e){return e.split("")}(e)}var q=Object.prototype.toString,P=x.Symbol,U=P?P.prototype:void 0,V=U?U.toString:void 0;function B(e){if("string"==typeof e)return e;if(function(e){return"symbol"==typeof e||function(e){return!!e&&"object"==typeof e}(e)&&"[object Symbol]"==q.call(e)}(e))return V?V.call(e):"";var r=e+"";return"0"==r&&1/e==-1/0?"-0":r}function L(e,r,t){var n=e.length;return t=void 0===t?n:t,!r&&t>=n?e:function(e,r,t){var n=-1,i=e.length;r<0&&(r=-r>i?0:i+r),(t=t>i?i:t)<0&&(t+=i),i=r>t?0:t-r>>>0,r>>>=0;for(var s=Array(i);++n<i;)s[n]=e[n+r];return s}(e,r,t)}var z=function(e,r,t){var n;if((e=null==(n=e)?"":B(n))&&(t||void 0===r))return e.replace($,"");if(!e||!(r=B(r)))return e;var i=K(e),s=K(r);return L(i,function(e,r){for(var t=-1,n=e.length;++t<n&&C(r,e[t],0)>-1;);return t}(i,s),function(e,r){for(var t=e.length;t--&&C(r,e[t],0)>-1;);return t}(i,s)+1).join("")};function G(e,r){let s=!0;const o=[".",",","'"," "];let a;if("string"!=typeof e)throw new TypeError(`string-remove-thousand-separators/remSep(): [THROW_ID_01] Input must be string! Currently it's: ${typeof e}, equal to:\n${JSON.stringify(e,null,4)}`);if(null!=r&&!w(r))throw new TypeError(`string-remove-thousand-separators/remSep(): [THROW_ID_02] Options object must be a plain object! Currently it's: ${typeof r}, equal to:\n${JSON.stringify(r,null,4)}`);const u=Object.assign({},{removeThousandSeparatorsFromNumbers:!0,padSingleDecimalPlaceNumbers:!0,forceUKStyle:!1},r),l=z(e.trim(),'"');if(""===l)return l;const f=new c;for(let e=0,r=l.length;e<r;e++){if(u.removeThousandSeparatorsFromNumbers&&""===l[e].trim()&&f.add(e,e+1),u.removeThousandSeparatorsFromNumbers&&"'"===l[e]&&(f.add(e,e+1),"'"===l[e+1])){s=!1;break}if(o.includes(l[e])){if(void 0!==l[e+1]&&O(l[e+1]))if(void 0!==l[e+2]){if(!O(l[e+2])){s=!1;break}if(void 0!==l[e+3]){if(!O(l[e+3])){s=!1;break}if(void 0!==l[e+4]&&O(l[e+4])){s=!1;break}if(u.removeThousandSeparatorsFromNumbers&&f.add(e,e+1),a){if(l[e]!==a){s=!1;break}}else a=l[e]}else u.removeThousandSeparatorsFromNumbers&&u.forceUKStyle&&","===l[e]&&f.add(e,e+1,".")}else u.forceUKStyle&&","===l[e]&&f.add(e,e+1,"."),u.padSingleDecimalPlaceNumbers&&f.add(e+2,e+2,"0")}else if(!O(l[e])){s=!1;break}}return s&&f.current()?function(e,r,s){let o=0,a=0;if(0===arguments.length)throw new Error("ranges-apply: [THROW_ID_01] inputs missing!");if(!i(e))throw new TypeError(`ranges-apply: [THROW_ID_02] first input argument must be a string! Currently it's: ${typeof e}, equal to: ${JSON.stringify(e,null,4)}`);if(null===r)return e;if(!Array.isArray(r))throw new TypeError(`ranges-apply: [THROW_ID_03] second input argument must be an array (or null)! Currently it's: ${typeof r}, equal to: ${JSON.stringify(r,null,4)}`);if(s&&"function"!=typeof s)throw new TypeError(`ranges-apply: [THROW_ID_04] the third input argument must be a function (or falsey)! Currently it's: ${typeof s}, equal to: ${JSON.stringify(s,null,4)}`);Array.isArray(r)&&(Number.isInteger(r[0])&&r[0]>=0||/^\d*$/.test(r[0]))&&(Number.isInteger(r[1])&&r[1]>=0||/^\d*$/.test(r[1]))&&(r=[r]);const u=r.length;let l=0;r.forEach((e,t)=>{if(s&&(o=Math.floor(l/u*10),o!==a&&(a=o,s(o))),!Array.isArray(e))throw new TypeError(`ranges-apply: [THROW_ID_05] ranges array, second input arg., has ${t}th element not an array: ${JSON.stringify(e,null,4)}, which is ${typeof e}`);if(!Number.isInteger(e[0])||e[0]<0){if(!/^\d*$/.test(e[0]))throw new TypeError(`ranges-apply: [THROW_ID_06] ranges array, second input arg. has ${t}th element, array [${e[0]},${e[1]}]. That array has first element not an integer, but ${typeof e[0]}, equal to: ${JSON.stringify(e[0],null,4)}. Computer doesn't like this.`);r[t][0]=Number.parseInt(r[t][0],10)}if(!Number.isInteger(e[1])){if(!/^\d*$/.test(e[1]))throw new TypeError(`ranges-apply: [THROW_ID_07] ranges array, second input arg. has ${t}th element, array [${e[0]},${e[1]}]. That array has second element not an integer, but ${typeof e[1]}, equal to: ${JSON.stringify(e[1],null,4)}. Computer doesn't like this.`);r[t][1]=Number.parseInt(r[t][1],10)}l++});const f=t(r,{progressFn:e=>{s&&(o=10+Math.floor(e/10),o!==a&&(a=o,s(o)))}}),c=f.length;if(c>0){const r=e.slice(f[c-1][1]);e=f.reduce((r,t,i,u)=>{s&&(o=20+Math.floor(i/c*80),o!==a&&(a=o,s(o)));const l=0===i?0:u[i-1][1],f=u[i][0];return r+e.slice(l,f)+(n(u[i][2])?u[i][2]:"")},""),e+=r}return e}(l,f.current()):l}function Z(e,r,t){switch(t.length){case 0:return e.call(r);case 1:return e.call(r,t[0]);case 2:return e.call(r,t[0],t[1]);case 3:return e.call(r,t[0],t[1],t[2])}return e.apply(r,t)}function Q(e,r,t){if(r!=r)return function(e,r,t,n){for(var i=e.length,s=t+(n?1:-1);n?s--:++s<i;)if(r(e[s],s,e))return s;return-1}(e,X,t);for(var n=t-1,i=e.length;++n<i;)if(e[n]===r)return n;return-1}function Y(e,r,t,n){for(var i=t-1,s=e.length;++i<s;)if(n(e[i],r))return i;return-1}function X(e){return e!=e}var ee=Array.prototype.splice,re=Math.max;function te(e,r,t,n){var i=n?Y:Q,s=-1,o=r.length,a=e;for(e===r&&(r=function(e,r){var t=-1,n=e.length;r||(r=Array(n));for(;++t<n;)r[t]=e[t];return r}(r)),t&&(a=function(e,r){for(var t=-1,n=e?e.length:0,i=Array(n);++t<n;)i[t]=r(e[t],t,e);return i}(e,function(e){return function(r){return e(r)}}(t)));++s<o;)for(var u=0,l=r[s],f=t?t(l):l;(u=i(a,f,u,n))>-1;)a!==e&&ee.call(a,u,1),ee.call(e,u,1);return e}var ne=function(e,r){return r=re(void 0===r?e.length-1:r,0),function(){for(var t=arguments,n=-1,i=re(t.length-r,0),s=Array(i);++n<i;)s[n]=t[r+n];n=-1;for(var o=Array(r+1);++n<r;)o[n]=t[n];return o[r]=s,Z(e,this,o)}}((function(e,r){return e&&e.length&&r&&r.length?te(e,r):e})),ie={symbol:"$",separator:",",decimal:".",formatWithSymbol:!1,errorOnInvalid:!1,precision:2,pattern:"!#",negativePattern:"-!#"},se=function(e){return Math.round(e)},oe=function(e){return Math.pow(10,e)},ae=/(\d)(?=(\d{3})+\b)/g,ue=/(\d)(?=(\d\d)+\d\b)/g;
/*!
   * currency.js - v1.2.2
   * http://scurker.github.io/currency.js
   *
   * Copyright (c) 2019 Jason Wilson
   * Released under MIT license
   */function le(e,r){if(!(this instanceof le))return new le(e,r);var t=Object.assign({},ie,r),n=oe(t.precision),i=fe(e,t);this.intValue=i,this.value=i/n,t.increment=t.increment||1/n,t.useVedic?t.groups=ue:t.groups=ae,this.s=t,this.p=n}function fe(e,r){var t=!(arguments.length>2&&void 0!==arguments[2])||arguments[2],n=0,i=r.decimal,s=r.errorOnInvalid,o=r.precision,a=oe(o),u="number"==typeof e;if(u||e instanceof le)n=(u?e:e.value)*a;else if("string"==typeof e){var l=new RegExp("[^-\\d"+i+"]","g"),f=new RegExp("\\"+i,"g");n=(n=e.replace(/\((.*)\)/,"-$1").replace(l,"").replace(f,".")*a)||0}else{if(s)throw Error("Invalid Input");n=0}return n=n.toFixed(4),t?se(n):n}le.prototype={add:function(e){var r=this.intValue,t=this.s,n=this.p;return le((r+=fe(e,t))/n,t)},subtract:function(e){var r=this.intValue,t=this.s,n=this.p;return le((r-=fe(e,t))/n,t)},multiply:function(e){var r=this.intValue,t=this.s;return le((r*=e)/oe(t.precision),t)},divide:function(e){var r=this.intValue,t=this.s;return le(r/=fe(e,t,!1),t)},distribute:function(e){for(var r=this.intValue,t=this.p,n=this.s,i=[],s=Math[r>=0?"floor":"ceil"](r/e),o=Math.abs(r-s*e);0!==e;e--){var a=le(s/t,n);o-- >0&&(a=r>=0?a.add(1/t):a.subtract(1/t)),i.push(a)}return i},dollars:function(){return~~this.value},cents:function(){return~~(this.intValue%this.p)},format:function(e){var r=this.s,t=r.pattern,n=r.negativePattern,i=r.formatWithSymbol,s=r.symbol,o=r.separator,a=r.decimal,u=r.groups,l=(this+"").replace(/^-/,"").split("."),f=l[0],c=l[1];return void 0===e&&(e=i),(this.value>=0?t:n).replace("!",e?s:"").replace("#","".concat(f.replace(u,"$1"+o)).concat(c?a+c:""))},toString:function(){var e,r,t=this.intValue,n=this.p,i=this.s;return(e=t/n,r=i.increment,se(e/r)*r).toFixed(i.precision)},toJSON:function(){return this.value}};var ce=Array.isArray;function pe(e){return null!=e}var he=["د.إ","؋","L","֏","ƒ","Kz","$","ƒ","₼","KM","৳","лв",".د.ب","FBu","$b","R$","฿","Nu.","P","p.","BZ$","FC","CHF","¥","₡","₱","Kč","Fdj","kr","RD$","دج","kr","Nfk","Br","Ξ","€","₾","₵","GH₵","D","FG","Q","L","kn","G","Ft","Rp","₪","₹","ع.د","﷼","kr","J$","JD","¥","KSh","лв","៛","CF","₩","₩","KD","лв","₭","₨","M","Ł","Lt","Ls","LD","MAD","lei","Ar","ден","K","₮","MOP$","UM","₨","Rf","MK","RM","MT","₦","C$","kr","₨","﷼","B/.","S/.","K","₱","₨","zł","Gs","﷼","￥","lei","Дин.","₽","R₣","﷼","₨","ج.س.","kr","£","Le","S","Db","E","฿","SM","T","د.ت","T$","₤","₺","TT$","NT$","TSh","₴","USh","$U","лв","Bs","₫","VT","WS$","FCFA","Ƀ","CFA","₣","﷼","R","Z$"];function ge(r){if("string"!=typeof r)throw new Error("csv-sort/util/findtype(): input must be string! Currently it's: ".concat(e(r)));return O(r)||he.some((function(e){return O(r.replace(e,"").replace(/[,.]/g,""))}))?"numeric":0===r.trim().length?"empty":"text"}return function(r){var t,n=null,i=null;if("string"==typeof r){if(0===r.length)return[[""]];t=function(e,r){let t=0,n=0,i=[];const s=[];let o=!1,a=!0;if(void 0!==r&&!w(r))throw new Error(`csv-split-easy/split(): [THROW_ID_02] Options object must be a plain object! Currently it's of a type ${typeof r} equal to:\n${JSON.stringify(r,null,4)}`);const u=Object.assign({},{removeThousandSeparatorsFromNumbers:!0,padSingleDecimalPlaceNumbers:!0,forceUKStyle:!1},r);if("string"!=typeof e)throw new TypeError(`csv-split-easy/split(): [THROW_ID_04] input must be string! Currently it's: ${typeof e}, equal to: ${JSON.stringify(e,null,4)}`);if(""===e)return[[""]];for(let r=0,l=(e=e.trim()).length;r<l;r++){if(a&&'"'!==e[r]&&","!==e[r]&&""!==e[r].trim()&&(a=!1),'"'===e[r])if(o&&'"'===e[r+1])r+=1;else if(o){o=!1;const n=e.slice(t,r);""!==n.trim()&&(a=!1);const s=/""/.test(n)?n.replace(/""/g,'"'):G(n,{removeThousandSeparatorsFromNumbers:u.removeThousandSeparatorsFromNumbers,padSingleDecimalPlaceNumbers:u.padSingleDecimalPlaceNumbers,forceUKStyle:u.forceUKStyle});i.push(s)}else o=!0,t=r+1;else if(o||","!==e[r])if("\n"===e[r]||"\r"===e[r]){if(!n){if(n=r,!o&&'"'!==e[r-1]){const n=e.slice(t,r);""!==n.trim()&&(a=!1),i.push(G(n,{removeThousandSeparatorsFromNumbers:u.removeThousandSeparatorsFromNumbers,padSingleDecimalPlaceNumbers:u.padSingleDecimalPlaceNumbers,forceUKStyle:u.forceUKStyle}))}a?i=[]:s.push(i),a=!0,i=[]}t=r+1}else n&&(n=0,t=r);else{if('"'!==e[r-1]&&!o){const n=e.slice(t,r);""!==n.trim()&&(a=!1),i.push(G(n,{removeThousandSeparatorsFromNumbers:u.removeThousandSeparatorsFromNumbers,padSingleDecimalPlaceNumbers:u.padSingleDecimalPlaceNumbers,forceUKStyle:u.forceUKStyle}))}t=r+1,n&&(n=0)}if(r+1===l){if('"'!==e[r]){const n=e.slice(t,r+1);""!==n.trim()&&(a=!1),i.push(G(n,{removeThousandSeparatorsFromNumbers:u.removeThousandSeparatorsFromNumbers,padSingleDecimalPlaceNumbers:u.padSingleDecimalPlaceNumbers,forceUKStyle:u.forceUKStyle}))}a?i=[]:s.push(i),a=!0}}return 0===s.length?[[""]]:s}(r)}else{if(!ce(r))throw new TypeError("csv-sort/csvSort(): [THROW_ID_02] The input is of a wrong type! We accept either string of array of arrays. We got instead: ".concat(e(r),", equal to:\n").concat(JSON.stringify(r,null,4)));var s,o;if(!r.every((function(e,r){return ce(e)||(s=e,o=r),ce(e)})))throw new TypeError("csv-sort/csvSort(): [THROW_ID_01] the input is array as expected, but not all of its children are arrays! For example, the element at index ".concat(o," is not array but: ").concat(e(s),", equal to:\n").concat(JSON.stringify(s,null,4)))}for(var a=null,u=!1,l=!0,f=[],c=null,p=t.length-1;p>=0;p--)if(a){0===p&&(u=t[p].every((function(e){return"text"===ge(e)||"empty"===ge(e)}))),u||a.length===t[p].length||(l=!1);for(var h=null,g=0,y=t[p].length;g<y;g++)if(null===h&&"empty"===ge(t[p][g].trim())&&(h=g),null!==h&&"empty"!==ge(t[p][g].trim())&&(h=null),ge(t[p][g].trim())!==a[g]&&!u){var m=ge(t[p][g].trim());if(ce(a[g]))a[g].includes(m)||a[g].push(ge(t[p][g].trim()));else if(a[g]!==m){var d=a[g];a[g]=[],a[g].push(d),a[g].push(m)}}null!==c&&null!==h&&h>c&&(!u||u&&0!==p)&&(c=h)}else if(1!==t[p].length||""!==t[p][0]){a=[];for(var b=0,v=t[p].length;b<v;b++)a.push(ge(t[p][b].trim())),null===c&&"empty"===ge(t[p][b].trim())&&(c=b),null!==c&&"empty"!==ge(t[p][b].trim())&&(c=null)}c||(c=a.length);for(var T=0,S=0,O=a.length;S<O&&"empty"===a[S];S++)T=S;0!==T&&(t=t.map((function(e){return e.slice(T+1,c)})),a=a.slice(T+1,c));var $,N=[];a.forEach((function(e,r){"numeric"===e&&N.push(r)}));var _=u?1:0;if(1===N.length)$=N[0];else{if(0===N.length)throw new Error('csv-sort/csvSort(): [THROW_ID_03] Your CSV file does not contain numeric-only columns and computer was not able to detect the "Balance" column!');for(var R=Array.from(N),I=[],E=0,A=R.length;E<A;E++){for(var D=R[E],F=void 0,j=!0,W=void 0,H=!0,J=_,k=t.length;J<k&&(j&&(pe(F)&&F===t[J][D]?(I.push(D),j=!1):F=t[J][D]),H&&(pe(W)?t[J][D]!==W&&(H=!1):W=t[J][D]),j);J++);H&&f.push(D)}if(1===(R=ne.apply(void 0,[R].concat(I))).length)$=R[0];else if(0===R.length)throw new Error('csv-sort/csvSort(): [THROW_ID_04] The computer can\'t find the "Balance" column! It saw some numeric-only columns, but they all seem to have certain rows with the same values as rows right below/above them!')}if(!$)throw new Error("csv-sort/csvSort(): [THROW_ID_05] Sadly computer couldn't find its way in this CSV and had to stop working on it.");var x=ne.apply(void 0,[Array.from(a.reduce((function(e,r,t){return("string"==typeof r&&"numeric"===r||ce(r)&&r.includes("numeric"))&&e.push(t),e}),[])),$].concat(f)),C=[];C.push(t[t.length-1].slice(0,c));for(var M=[],K=u?1:0,q=t.length-2;q>=K;q--)for(var P=t.length-2;P>=K;P--)if(!M.includes(P)){for(var U=!1,V=0,B=x.length;V<B;V++){var L=null;""!==t[P][x[V]]&&(L=le(t[P][x[V]]));var z=null;""!==t[P][$]&&(z=le(t[P][$]));var Z=null;""!==C[0][$]&&(Z=le(C[0][$]).format());var Q=null;""!==C[C.length-1][x[V]]&&(Q=le(C[C.length-1][x[V]]).format());var Y=null;if(""!==C[C.length-1][$]&&(Y=le(C[C.length-1][$])),L&&z.add(L).format()===Z){C.unshift(t[P].slice(0,c)),M.push(P),U=!0;break}if(L&&z.subtract(L).format()===Z){C.unshift(t[P].slice(0,c)),M.push(P),U=!0;break}if(Q&&Y.add(Q).format()===z.format()){C.push(t[P].slice(0,c)),M.push(P),U=!0;break}if(Q&&Y.subtract(Q).format()===z.format()){C.push(t[P].slice(0,c)),M.push(P),U=!0;break}}if(U){U=!1;break}}return u&&(l&&t[0].length>a.length&&(t[0].length=a.length),C.unshift(t[0].slice(0,c))),t.length-(u?2:1)!==M.length&&(n="Not all rows were recognised!",i="alert"),{res:C,msgContent:n,msgType:i}}}));
